// Generated by Copilot
const request = require('supertest');
const mongoose = require('mongoose');
const path = require('path');
require('dotenv').config({ path: path.join(__dirname, '../.env.test') });
const app = require('../app');
const User = require('../src/models/userModel');

let server;

beforeAll(async () => {
  server = app.listen(0); // random available port
  await mongoose.connect(process.env.MONGO_URI);
  await User.deleteMany({});
});

afterAll(async () => {
  await mongoose.connection.close();
  await server.close();
});

describe('Authentication Endpoints', () => {
  let adminToken;
  const studentData = {
    name: 'Test Student',
    email: 'student1@example.com',
    matricule: 'STU10001',
    faculty: 'Science',
    program: 'CS',
    password: 'Password123',
  };
  const adminData = {
    name: 'Admin User',
    email: 'admin@example.com',
    matricule: 'ADM10001',
    role: 'admin',
    password: 'AdminPass123',
    status: 'Active',
  };

  it('should register a new student', async () => {
    const res = await request(server)
      .post('/api/auth/register')
      .send(studentData);
    expect(res.statusCode).toBe(201);
    expect(res.body).toHaveProperty('token');
    expect(res.body.email).toBe(studentData.email);
  });

  it('should not register with duplicate email or matricule', async () => {
    const res = await request(server)
      .post('/api/auth/register')
      .send(studentData);
    expect(res.statusCode).toBe(409);
  });

  it('should login with email', async () => {
    const res = await request(server)
      .post('/api/auth/login')
      .send({ identifier: studentData.email, password: studentData.password });
    expect(res.statusCode).toBe(200);
    expect(res.body).toHaveProperty('token');
  });

  it('should login with matricule', async () => {
    const res = await request(server)
      .post('/api/auth/login')
      .send({ identifier: studentData.matricule, password: studentData.password });
    expect(res.statusCode).toBe(200);
    expect(res.body).toHaveProperty('token');
  });

  it('should not login with wrong password', async () => {
    const res = await request(server)
      .post('/api/auth/login')
      .send({ identifier: studentData.email, password: 'WrongPass' });
    expect(res.statusCode).toBe(401);
  });

  it('should allow admin to create another user', async () => {
    // Create admin directly in DB
    const admin = new User(adminData);
    await admin.save();
    // Login as admin
    const loginRes = await request(server)
      .post('/api/auth/login')
      .send({ identifier: adminData.email, password: adminData.password });
    expect(loginRes.statusCode).toBe(200);
    adminToken = loginRes.body.token;
    // Admin creates HOD
    const res = await request(server)
      .post('/api/auth/admin/users')
      .set('Authorization', `Bearer ${adminToken}`)
      .send({
        name: 'HOD User',
        email: 'hod@example.com',
        matricule: 'HOD10001',
        role: 'hod',
        faculty: 'Science',
        program: 'CS',
        password: 'HodPass123',
      });
    expect(res.statusCode).toBe(201);
    expect(res.body.role).toBe('hod');
  });

  it('should not allow non-admin to create user', async () => {
    // Login as student
    const loginRes = await request(server)
      .post('/api/auth/login')
      .send({ identifier: studentData.email, password: studentData.password });
    const studentToken = loginRes.body.token;
    const res = await request(server)
      .post('/api/auth/admin/users')
      .set('Authorization', `Bearer ${studentToken}`)
      .send({
        name: 'Another User',
        email: 'other@example.com',
        matricule: 'OTH10001',
        role: 'student',
        faculty: 'Science',
        program: 'CS',
        password: 'OtherPass123',
      });
    expect(res.statusCode).toBe(403);
  });

  it('should not allow unauthenticated user to create user', async () => {
    const res = await request(server)
      .post('/api/auth/admin/users')
      .send({
        name: 'NoAuth User',
        email: 'noauth@example.com',
        matricule: 'NOAUTH10001',
        role: 'student',
        faculty: 'Science',
        program: 'CS',
        password: 'NoAuthPass123',
      });
    expect(res.statusCode).toBe(401);
  });
});
