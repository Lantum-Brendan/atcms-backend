// Generated by Copilot
const nodemailer = require('nodemailer');
const logger = require('../utils/logger');

class EmailService {
    constructor() {
        // Use test configuration for development/testing
        this.transporter = nodemailer.createTransport({
            host: 'smtp.ethereal.email',
            port: 587,
            secure: false,
            auth: {
                user: 'test@ethereal.email',
                pass: 'test123'
            }
        });

        // Verify SMTP connection configuration
        this.transporter.verify((error, success) => {
            if (error) {
                logger.error('SMTP connection failed:', error);
            } else {
                logger.info('SMTP server is ready to take our messages');
            }
        });
    }

    async sendEmail(to, subject, html) {
        if (!to || !subject || !html) {
            logger.error('Missing required email parameters:', { to, subject, html });
            throw new Error('Missing required email parameters');
        }

        try {
            const mailOptions = {
                from: 'transcripts@ub.edu.cm',
                to,
                subject,
                html
            };

            const info = await this.transporter.sendMail(mailOptions);
            logger.info(`Email sent successfully to ${to}: ${info.messageId}`);
            return true;
        } catch (error) {
            logger.error('Email sending failed:', {
                error: error.message,
                to,
                subject
            });
            throw new Error(`Failed to send email: ${error.message}`);
        }
    }

    async sendTranscriptRequestConfirmation(email, transcript) {
        const subject = 'Transcript Request Confirmation';
        const html = `
            <h2>Transcript Request Confirmation</h2>
            <p>Dear ${transcript.studentName},</p>
            <p>Your transcript request has been received and payment processed successfully.</p>
            <h3>Request Details:</h3>
            <ul>
                <li>Request ID: ${transcript._id}</li>
                <li>Mode: ${transcript.modeOfTreatment}</li>
                <li>Processing Time: ${transcript.processingTime}</li>
                <li>Amount Paid: ${transcript.amount} FRS</li>
            </ul>
            <p>You will receive another notification when your transcript is ready.</p>
            <p>Best regards,<br>University of Buea</p>
        `;

        return this.sendEmail(email, subject, html);
    }

    async sendTranscriptReadyNotification(email, transcript) {
        const subject = 'Your Transcript is Ready';
        const html = `
            <h2>Transcript Ready for Collection</h2>
            <p>Dear ${transcript.studentName},</p>
            <p>Your transcript request (ID: ${transcript._id}) has been processed and is now ready.</p>
            ${transcript.deliveryMethod === 'Collect from Faculty' 
                ? '<p>You can collect your transcript from the faculty office during working hours.</p>'
                : '<p>Your transcript has been attached to this email.</p>'
            }
            <p>Best regards,<br>University of Buea</p>
        `;

        return this.sendEmail(email, subject, html);
    }

    async sendTranscriptToVerifier(verifierEmail, transcript) {
        const subject = 'Transcript Verification Request';
        const html = `
            <h2>Transcript Verification Request</h2>
            <p>Dear Sir/Madam,</p>
            <p>Please find attached the academic transcript for:</p>
            <ul>
                <li>Student Name: ${transcript.studentName}</li>
                <li>Matriculation Number: ${transcript.matricule}</li>
                <li>Program: ${transcript.program}</li>
            </ul>
            <p>This document is officially generated by the University of Buea.</p>
            <p>Best regards,<br>University of Buea</p>
        `;

        return this.sendEmail(verifierEmail, subject, html);
    }

    async sendPaymentFailureNotification(email, transcript) {
        const subject = 'Transcript Request Payment Failed';
        const html = `
            <h2>Payment Failed</h2>
            <p>Dear ${transcript.studentName},</p>
            <p>The payment for your transcript request (ID: ${transcript._id}) has failed.</p>
            <p>Please try again with a different payment method or contact support if the issue persists.</p>
            <h3>Request Details:</h3>
            <ul>
                <li>Mode: ${transcript.modeOfTreatment}</li>
                <li>Amount: ${transcript.amount} FRS</li>
            </ul>
            <p>Best regards,<br>University of Buea</p>
        `;

        return this.sendEmail(email, subject, html);
    }

    async sendStatusUpdateNotification(email, transcript, status) {
        const subject = 'Transcript Request Status Update';
        const html = `
            <h2>Status Update</h2>
            <p>Dear ${transcript.studentName},</p>
            <p>Your transcript request (ID: ${transcript._id}) status has been updated to: ${status}</p>
            <p>Best regards,<br>University of Buea</p>
        `;

        return this.sendEmail(email, subject, html);
    }
}

module.exports = new EmailService();