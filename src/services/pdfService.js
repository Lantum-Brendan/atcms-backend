// Generated by Copilot
const PDFDocument = require('pdfkit');
const fs = require('fs');
const path = require('path');
const crypto = require('crypto');
const logger = require('../utils/logger');

class PDFService {
    constructor() {
        this.outputDir = path.join(process.cwd(), 'uploads', 'transcripts');
        // Ensure output directory exists
        if (!fs.existsSync(this.outputDir)) {
            fs.mkdirSync(this.outputDir, { recursive: true });
        }
    }

    async generateTranscript(transcriptRequest) {
        try {
            const fileName = `transcript_${transcriptRequest.matricule}_${Date.now()}.pdf`;
            const filePath = path.join(this.outputDir, fileName);
            
            await this.createTranscriptPDF(transcriptRequest, filePath);
            
            // Generate digital signature
            const signature = this.generateDigitalSignature(filePath);
            
            return {
                success: true,
                url: filePath,
                signature
            };
        } catch (error) {
            logger.error('PDF generation error:', error);
            throw new Error('Failed to generate transcript PDF');
        }
    }

    async createTranscriptPDF(transcriptRequest, outputPath) {
        return new Promise((resolve, reject) => {
            try {
                const doc = new PDFDocument({
                    size: 'A4',
                    margins: {
                        top: 50,
                        bottom: 50,
                        left: 72,
                        right: 72
                    }
                });

                // Pipe the PDF to a write stream
                doc.pipe(fs.createWriteStream(outputPath));

                // Add university logo and header
                this.addHeader(doc);

                // Add student information
                this.addStudentInfo(doc, transcriptRequest);

                // Add watermark
                this.addWatermark(doc, transcriptRequest.matricule);

                // Add transcript content
                // TODO: Add actual transcript content from database
                this.addTranscriptContent(doc);

                // Add footer with verification info
                this.addFooter(doc, transcriptRequest);

                // Finalize the PDF
                doc.end();

                doc.on('end', () => {
                    resolve();
                });

                doc.on('error', (error) => {
                    reject(error);
                });
            } catch (error) {
                reject(error);
            }
        });
    }

    addHeader(doc) {
        // Add university logo
        // doc.image('path/to/logo.png', 72, 30, { width: 50 });

        doc.fontSize(18)
           .text('UNIVERSITY OF BUEA', { align: 'center' })
           .fontSize(16)
           .text('OFFICIAL ACADEMIC TRANSCRIPT', { align: 'center' })
           .moveDown();
    }

    addStudentInfo(doc, transcript) {
        doc.fontSize(12);
        
        // Create a table-like structure for student info
        const startX = 72;
        const startY = doc.y;
        const colWidth = 250;
        
        doc.text('Student Name:', startX, startY)
           .text(transcript.studentName, startX + colWidth, startY)
           .moveDown()
           .text('Matriculation Number:', startX)
           .text(transcript.matricule, startX + colWidth)
           .moveDown()
           .text('Faculty:', startX)
           .text(transcript.faculty, startX + colWidth)
           .moveDown()
           .text('Program:', startX)
           .text(transcript.program, startX + colWidth)
           .moveDown()
           .text('Level:', startX)
           .text(transcript.level, startX + colWidth)
           .moveDown(2);
    }

    addWatermark(doc, matricule) {
        // Save graphics state
        doc.save();
        
        // Configure watermark
        doc.fill('#f0f0f0')
           .fontSize(60)
           .rotate(45, { origin: [doc.page.width / 2, doc.page.height / 2] });

        // Add watermark text multiple times across the page
        for (let i = 0; i < doc.page.height; i += 200) {
            doc.text('UNIVERSITY OF BUEA', 0, i, {
                align: 'center',
                width: doc.page.width
            });
        }

        // Restore graphics state
        doc.restore();
    }

    addTranscriptContent(doc) {
        // TODO: Add actual transcript content
        doc.moveDown()
           .fontSize(14)
           .text('Academic Record', { underline: true })
           .moveDown();

        // Add placeholder content
        doc.fontSize(12)
           .text('This section will contain the actual transcript data including:')
           .moveDown()
           .text('• Course codes and titles')
           .text('• Credit hours')
           .text('• Grades')
           .text('• GPAs')
           .moveDown(2);
    }

    addFooter(doc, transcript) {
        const pageHeight = doc.page.height;
        
        doc.fontSize(10)
           .text('This document is electronically generated and is valid without signature.', {
               align: 'center',
               width: doc.page.width - 144
           })
           .moveDown()
           .text(`Generated on: ${new Date().toLocaleDateString()}`, {
               align: 'center'
           })
           .moveDown()
           .text(`Verification Code: ${this.generateVerificationCode(transcript)}`, {
               align: 'center'
           });
    }

    generateVerificationCode(transcript) {
        // Generate a unique verification code based on transcript details
        const data = `${transcript.matricule}-${transcript.dateOfRequest}-${transcript._id}`;
        return crypto.createHash('sha256')
                    .update(data)
                    .digest('hex')
                    .substring(0, 8)
                    .toUpperCase();
    }

    generateDigitalSignature(filePath) {
        // Generate a digital signature for the PDF
        const fileBuffer = fs.readFileSync(filePath);
        const hashSum = crypto.createHash('sha256');
        hashSum.update(fileBuffer);
        return hashSum.digest('hex');
    }

    async verifyTranscript(filePath, signature) {
        try {
            const currentSignature = this.generateDigitalSignature(filePath);
            return currentSignature === signature;
        } catch (error) {
            logger.error('Transcript verification error:', error);
            return false;
        }
    }
}

module.exports = new PDFService();