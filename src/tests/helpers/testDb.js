// Generated by Copilot
const mongoose = require('mongoose');
const { MongoMemoryServer } = require('mongodb-memory-server');
const testLogger = require('./testLogger');

class TestDatabase {
    constructor() {
        this.mongoServer = null;
        this.connection = null;
    }

    async connect() {
        try {
            this.mongoServer = await MongoMemoryServer.create();
            const mongoUri = this.mongoServer.getUri();
            
            this.connection = await mongoose.connect(mongoUri, {
                useNewUrlParser: true,
                useUnifiedTopology: true
            });

            testLogger.info('Connected to test database');
            return this.connection;
        } catch (error) {
            testLogger.error('Test database connection error:', error);
            throw error;
        }
    }

    async disconnect() {
        try {
            await mongoose.disconnect();
            if (this.mongoServer) {
                await this.mongoServer.stop();
            }
            testLogger.info('Disconnected from test database');
        } catch (error) {
            testLogger.error('Test database disconnection error:', error);
            throw error;
        }
    }

    async clearDatabase() {
        try {
            const collections = mongoose.connection.collections;
            for (const key in collections) {
                const collection = collections[key];
                await collection.deleteMany();
            }
            testLogger.info('Cleared test database');
        } catch (error) {
            testLogger.error('Error clearing test database:', error);
            throw error;
        }
    }

    async createCollection(name) {
        try {
            const collection = await mongoose.connection.createCollection(name);
            testLogger.info(`Created collection: ${name}`);
            return collection;
        } catch (error) {
            testLogger.error(`Error creating collection ${name}:`, error);
            throw error;
        }
    }

    async dropCollection(name) {
        try {
            await mongoose.connection.dropCollection(name);
            testLogger.info(`Dropped collection: ${name}`);
        } catch (error) {
            // Ignore error if collection doesn't exist
            if (error.code !== 26) {
                testLogger.error(`Error dropping collection ${name}:`, error);
                throw error;
            }
        }
    }
}

module.exports = new TestDatabase();