// Generated by Copilot
const request = require('supertest');
const mongoose = require('mongoose');
const path = require('path');
const fs = require('fs');
require('dotenv').config({ path: path.join(__dirname, '../../.env.test') });
const app = require('../../app');
const Complaint = require('../models/complaintModel');
const User = require('../models/userModel');
const { generateToken } = require('../config/jwt');

let server;

beforeAll(async () => {
    server = app.listen(0); // random available port
    await mongoose.connect(process.env.MONGO_URI);
    
    // Drop collections and their indexes
    await Promise.all([
        User.collection.drop().catch(() => {}), // Ignore error if collection doesn't exist
        Complaint.collection.drop().catch(() => {})
    ]);

    // Rebuild indexes
    await Promise.all([
        User.syncIndexes(),
        Complaint.syncIndexes()
    ]);
});

afterAll(async () => {
    await mongoose.connection.close();
    await server.close();
});

beforeEach(async () => {
    // Clear collections without dropping indexes
    await Promise.all([
        User.deleteMany({}),
        Complaint.deleteMany({})
    ]);
});

describe('Complaint Module Tests', () => {
    let studentToken, hodToken, coordinatorToken, adminToken;
    let studentUser, hodUser, coordinatorUser, adminUser;

    beforeEach(async () => {
        // Create test users
        studentUser = await User.create({
            name: 'Test Student',
            matricule: 'FE20A001',
            email: 'student@test.com',
            password: 'password123',
            role: 'student',
            program: 'Computer Engineering'
        });

        hodUser = await User.create({
            name: 'Test HOD',
            email: 'hod@test.com',
            password: 'password123',
            role: 'hod',
            program: 'Computer Engineering'
        });

        coordinatorUser = await User.create({
            name: 'Test Coordinator',
            email: 'coordinator@test.com',
            password: 'password123',
            role: 'coordinator',
            programs: ['Computer Engineering', 'Software Engineering']
        });

        adminUser = await User.create({
            name: 'Test Admin',
            email: 'admin@test.com',
            password: 'password123',
            role: 'admin'
        });

        // Generate tokens
        studentToken = generateToken(studentUser);
        hodToken = generateToken(hodUser);
        coordinatorToken = generateToken(coordinatorUser);
        adminToken = generateToken(adminUser);
    });

    describe('POST /api/complaints', () => {
        const validComplaint = {
            studentName: 'Test Student',
            matricule: 'FE20A001',
            program: 'Computer Engineering',
            level: 'L300',
            phoneNumber: '+237123456789',
            complaintType: 'CA Mark',
            courseCode: 'CEF301',
            subject: 'Missing CA Mark',
            description: 'My CA mark for CEF301 is not showing',
            semester: 'First Semester'
        };

        test('should create complaint for authenticated student', async () => {
            const response = await request(app)
                .post('/api/complaints')
                .set('Authorization', `Bearer ${studentToken}`)
                .send(validComplaint);

            expect(response.status).toBe(201);
            expect(response.body.data).toHaveProperty('_id');
            expect(response.body.data.status).toBe('New');
        });

        test('should reject complaint creation for non-student users', async () => {
            const response = await request(app)
                .post('/api/complaints')
                .set('Authorization', `Bearer ${hodToken}`)
                .send(validComplaint);

            expect(response.status).toBe(403);
        });

        test('should validate required fields', async () => {
            const invalidComplaint = { ...validComplaint };
            delete invalidComplaint.subject;

            const response = await request(app)
                .post('/api/complaints')
                .set('Authorization', `Bearer ${studentToken}`)
                .send(invalidComplaint);

            expect(response.status).toBe(400);
        });
    });

    describe('GET /api/complaints', () => {
        beforeEach(async () => {
            // Create test complaints
            await Complaint.create([
                {
                    studentName: 'Test Student 1',
                    matricule: 'FE20A001',
                    program: 'Computer Engineering',
                    complaintType: 'CA Mark',
                    courseCode: 'CEF301',
                    subject: 'Test Complaint 1',
                    description: 'Description 1',
                    status: 'New',
                    createdBy: studentUser._id,
                    level: 'L300',
                    semester: 'First Semester'
                },
                {
                    studentName: 'Test Student 2',
                    matricule: 'FE20A002',
                    program: 'Software Engineering',
                    complaintType: 'Exam Mark',
                    courseCode: 'SEF301',
                    subject: 'Test Complaint 2',
                    description: 'Description 2',
                    status: 'Processing',
                    createdBy: studentUser._id,
                    level: 'L300',
                    semester: 'First Semester'
                }
            ]);
        });

        test('student should only see their complaints', async () => {
            const response = await request(app)
                .get('/api/complaints')
                .set('Authorization', `Bearer ${studentToken}`);

            expect(response.status).toBe(200);
            expect(response.body.data).toHaveLength(2);
        });

        test('HOD should only see program complaints', async () => {
            const response = await request(app)
                .get('/api/complaints')
                .set('Authorization', `Bearer ${hodToken}`);

            expect(response.status).toBe(200);
            expect(response.body.data.every(c => c.program === 'Computer Engineering')).toBe(true);
        });

        test('coordinator should see complaints from multiple programs', async () => {
            const response = await request(app)
                .get('/api/complaints')
                .set('Authorization', `Bearer ${coordinatorToken}`);

            expect(response.status).toBe(200);
            expect(response.body.data).toHaveLength(2);
        });
    });

    describe('PATCH /api/complaints/:id/status', () => {
        let testComplaint;

        beforeEach(async () => {
            testComplaint = await Complaint.create({
                studentName: 'Test Student',
                matricule: 'FE20A001',
                program: 'Computer Engineering',
                complaintType: 'CA Mark',
                courseCode: 'CEF301',
                subject: 'Test Complaint',
                description: 'Description',
                status: 'New',
                createdBy: studentUser._id,
                level: 'L300',
                semester: 'First Semester'
            });
        });

        test('HOD should be able to update complaint status', async () => {
            const response = await request(app)
                .patch(`/api/complaints/${testComplaint._id}/status`)
                .set('Authorization', `Bearer ${hodToken}`)
                .send({
                    status: 'Processing',
                    comment: 'Under review'
                });

            expect(response.status).toBe(200);
            expect(response.body.data.status).toBe('Processing');
        });

        test('should add status to history when updated', async () => {
            const response = await request(app)
                .patch(`/api/complaints/${testComplaint._id}/status`)
                .set('Authorization', `Bearer ${hodToken}`)
                .send({
                    status: 'Processing',
                    comment: 'Under review'
                });

            expect(response.body.data.statusHistory).toHaveLength(1);
            expect(response.body.data.statusHistory[0].status).toBe('Processing');
        });
    });

    describe('POST /api/complaints/:id/comments', () => {
        let testComplaint;

        beforeEach(async () => {
            testComplaint = await Complaint.create({
                studentName: 'Test Student',
                matricule: 'FE20A001',
                program: 'Computer Engineering',
                complaintType: 'CA Mark',
                courseCode: 'CEF301',
                subject: 'Test Complaint',
                description: 'Description',
                status: 'New',
                createdBy: studentUser._id,
                level: 'L300',
                semester: 'First Semester'
            });
        });

        test('authorized users can add comments', async () => {
            const response = await request(app)
                .post(`/api/complaints/${testComplaint._id}/comments`)
                .set('Authorization', `Bearer ${hodToken}`)
                .send({
                    comment: 'Test comment'
                });

            expect(response.status).toBe(200);
            expect(response.body.data.comments).toHaveLength(1);
        });
    });

    describe('POST /api/complaints/:id/escalate', () => {
        let testComplaint;

        beforeEach(async () => {
            testComplaint = await Complaint.create({
                studentName: 'Test Student',
                matricule: 'FE20A001',
                program: 'Computer Engineering',
                complaintType: 'CA Mark',
                courseCode: 'CEF301',
                subject: 'Test Complaint',
                description: 'Description',
                status: 'New',
                createdBy: studentUser._id,
                level: 'L300',
                semester: 'First Semester'
            });
        });

        test('HOD can escalate complaints', async () => {
            const response = await request(app)
                .post(`/api/complaints/${testComplaint._id}/escalate`)
                .set('Authorization', `Bearer ${hodToken}`)
                .send({
                    escalateTo: coordinatorUser._id,
                    instructions: 'Please review'
                });

            expect(response.status).toBe(200);
            expect(response.body.data.status).toBe('Escalated');
            expect(response.body.data.assignedTo.toString()).toBe(coordinatorUser._id.toString());
        });
    });

    describe('POST /api/complaints/bulk-resolve', () => {
        let complaints;

        beforeEach(async () => {
            complaints = await Complaint.create([
                {
                    studentName: 'Test Student 1',
                    matricule: 'FE20A001',
                    program: 'Computer Engineering',
                    complaintType: 'CA Mark',
                    courseCode: 'CEF301',
                    subject: 'Test Complaint 1',
                    description: 'Description 1',
                    status: 'Processing',
                    createdBy: studentUser._id,
                    level: 'L300',
                    semester: 'First Semester'
                },
                {
                    studentName: 'Test Student 2',
                    matricule: 'FE20A002',
                    program: 'Computer Engineering',
                    complaintType: 'CA Mark',
                    courseCode: 'CEF301',
                    subject: 'Test Complaint 2',
                    description: 'Description 2',
                    status: 'Processing',
                    createdBy: studentUser._id,
                    level: 'L300',
                    semester: 'First Semester'
                }
            ]);
        });

        test('HOD can bulk resolve complaints', async () => {
            const response = await request(app)
                .post('/api/complaints/bulk-resolve')
                .set('Authorization', `Bearer ${hodToken}`)
                .send({
                    complaintIds: complaints.map(c => c._id),
                    resolution: 'Issue resolved',
                    comment: 'Marks have been updated'
                });

            expect(response.status).toBe(200);
            const updatedComplaints = await Complaint.find({
                _id: { $in: complaints.map(c => c._id) }
            });
            expect(updatedComplaints.every(c => c.status === 'Resolved')).toBe(true);
        });
    });

    describe('GET /api/complaints/analytics', () => {
        beforeEach(async () => {
            await Complaint.create([
                {
                    studentName: 'Test Student 1',
                    matricule: 'FE20A001',
                    program: 'Computer Engineering',
                    complaintType: 'CA Mark',
                    courseCode: 'CEF301',
                    subject: 'Test Complaint 1',
                    description: 'Description 1',
                    status: 'Resolved',
                    createdBy: studentUser._id,
                    level: 'L300',
                    semester: 'First Semester'
                },
                {
                    studentName: 'Test Student 2',
                    matricule: 'FE20A002',
                    program: 'Computer Engineering',
                    complaintType: 'Exam Mark',
                    courseCode: 'CEF302',
                    subject: 'Test Complaint 2',
                    description: 'Description 2',
                    status: 'Processing',
                    createdBy: studentUser._id,
                    level: 'L300',
                    semester: 'First Semester'
                }
            ]);
        });

        test('HOD can view program analytics', async () => {
            const response = await request(app)
                .get('/api/complaints/analytics')
                .set('Authorization', `Bearer ${hodToken}`);

            expect(response.status).toBe(200);
            expect(response.body.data).toHaveProperty('totalComplaints');
            expect(response.body.data).toHaveProperty('statusCounts');
            expect(response.body.data).toHaveProperty('topComplaintTypes');
            expect(response.body.data).toHaveProperty('topCourses');
        });
    });

    describe('POST /api/complaints/:id/files', () => {
        let testComplaint;
        const testFilePath = path.join(__dirname, '../uploads/test.pdf');

        beforeEach(async () => {
            // Create test complaint
            testComplaint = await Complaint.create({
                studentName: 'Test Student',
                matricule: 'FE20A001',
                program: 'Computer Engineering',
                complaintType: 'CA Mark',
                courseCode: 'CEF301',
                subject: 'Test Complaint',
                description: 'Description',
                status: 'New',
                createdBy: studentUser._id,
                level: 'L300',
                semester: 'First Semester'
            });

            // Create test file
            if (!fs.existsSync(path.dirname(testFilePath))) {
                fs.mkdirSync(path.dirname(testFilePath), { recursive: true });
            }
            fs.writeFileSync(testFilePath, 'Test file content');
        });

        afterEach(() => {
            // Cleanup test files
            if (fs.existsSync(testFilePath)) {
                fs.unlinkSync(testFilePath);
            }
        });

        test('should upload file to complaint', async () => {
            const response = await request(app)
                .post(`/api/complaints/${testComplaint._id}/files`)
                .set('Authorization', `Bearer ${hodToken}`)
                .attach('files', testFilePath);

            expect(response.status).toBe(200);
            expect(response.body.data.attachedFiles).toHaveLength(1);
            expect(response.body.data.attachedFiles[0]).toHaveProperty('filename');
            expect(response.body.data.attachedFiles[0]).toHaveProperty('mimetype', 'application/pdf');
        });

        test('should validate file size limit', async () => {
            // Create a file larger than 2MB
            const largeFile = Buffer.alloc(3 * 1024 * 1024); // 3MB
            fs.writeFileSync(testFilePath, largeFile);

            const response = await request(app)
                .post(`/api/complaints/${testComplaint._id}/files`)
                .set('Authorization', `Bearer ${hodToken}`)
                .attach('files', testFilePath);

            expect(response.status).toBe(400);
            expect(response.body).toHaveProperty('message', 'File size should not exceed 2MB');
        });

        test('should validate file type', async () => {
            // Create an invalid file type
            fs.writeFileSync(testFilePath.replace('.pdf', '.exe'), 'Invalid file content');

            const response = await request(app)
                .post(`/api/complaints/${testComplaint._id}/files`)
                .set('Authorization', `Bearer ${hodToken}`)
                .attach('files', testFilePath.replace('.pdf', '.exe'));

            expect(response.status).toBe(400);
            expect(response.body).toHaveProperty('message', 'Invalid file type. Only PDF and image files are allowed.');
        });
    });

    describe('Notifications', () => {
        let testComplaint;

        beforeEach(async () => {
            testComplaint = await Complaint.create({
                studentName: 'Test Student',
                matricule: 'FE20A001',
                program: 'Computer Engineering',
                complaintType: 'CA Mark',
                courseCode: 'CEF301',
                subject: 'Test Complaint',
                description: 'Description',
                status: 'New',
                createdBy: studentUser._id,
                level: 'L300',
                semester: 'First Semester',
                notifications: [{
                    message: 'New complaint created',
                    read: false
                }]
            });
        });

        test('should get complaint notifications', async () => {
            const response = await request(app)
                .get(`/api/complaints/${testComplaint._id}/notifications`)
                .set('Authorization', `Bearer ${studentToken}`);

            expect(response.status).toBe(200);
            expect(response.body.data).toHaveLength(1);
            expect(response.body.data[0].message).toBe('New complaint created');
        });

        test('should mark notification as read', async () => {
            const notificationId = testComplaint.notifications[0]._id;

            const response = await request(app)
                .patch(`/api/complaints/${testComplaint._id}/notifications/${notificationId}`)
                .set('Authorization', `Bearer ${studentToken}`);

            expect(response.status).toBe(200);
            expect(response.body.data.find(n => n._id.toString() === notificationId.toString()).read).toBe(true);
        });

        test('should create notification on status change', async () => {
            const response = await request(app)
                .patch(`/api/complaints/${testComplaint._id}/status`)
                .set('Authorization', `Bearer ${hodToken}`)
                .send({
                    status: 'Processing',
                    comment: 'Under review'
                });

            expect(response.body.data.notifications).toHaveLength(2); // Original + new notification
            expect(response.body.data.notifications[1].message).toContain('Status updated to Processing');
        });

        test('should create notification on complaint escalation', async () => {
            const response = await request(app)
                .post(`/api/complaints/${testComplaint._id}/escalate`)
                .set('Authorization', `Bearer ${hodToken}`)
                .send({
                    escalateTo: coordinatorUser._id,
                    instructions: 'Please review'
                });

            expect(response.body.data.notifications).toHaveLength(2);
            expect(response.body.data.notifications[1].message).toContain('Complaint escalated');
        });
    });
});