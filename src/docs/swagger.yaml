# Generated by Copilot
openapi: 3.0.0
info:
  title: ATCMS Authentication API
  description: Authentication API documentation for Academic Transcript Management System
  version: 1.0.0
  contact:
    email: support@atcms.com

servers:
  - url: http://localhost:5000
    description: Development server
  - url: https://api.atcms.com
    description: Production server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    User:
      type: object
      properties:
        id:
          type: string
          description: User's unique identifier
        name:
          type: string
          description: User's full name
        email:
          type: string
          format: email
          description: User's email address
        matricule:
          type: string
          description: User's matriculation number
        role:
          type: string
          enum: [student, hod, coordinator, admin]
          description: User's role in the system
        faculty:
          type: string
          description: User's faculty (required for student/hod/coordinator)
        program:
          type: string
          description: User's program (required for student/hod/coordinator)
        status:
          type: string
          enum: [Active, Inactive]
          description: User's account status
        createdDate:
          type: string
          format: date-time
          description: Account creation timestamp
        phone:
          type: string
          description: User's phone number (optional)

    LoginRequest:
      type: object
      required:
        - identifier
        - password
      properties:
        identifier:
          type: string
          description: Email or matricule for login
        password:
          type: string
          format: password
          description: User's password

    RegisterRequest:
      type: object
      required:
        - name
        - email
        - matricule
        - faculty
        - program
        - password
      properties:
        name:
          type: string
          description: Student's full name
        email:
          type: string
          format: email
          description: Student's email address
        matricule:
          type: string
          description: Student's matriculation number
        faculty:
          type: string
          description: Student's faculty
        program:
          type: string
          description: Student's program
        password:
          type: string
          format: password
          minLength: 8
          description: Account password (min 8 characters)
        phone:
          type: string
          description: Student's phone number (optional)

    AdminCreateUserRequest:
      type: object
      required:
        - name
        - email
        - matricule
        - role
        - password
      properties:
        name:
          type: string
          description: User's full name
        email:
          type: string
          format: email
          description: User's email address
        matricule:
          type: string
          description: User's matriculation number
        role:
          type: string
          enum: [student, hod, coordinator, admin]
          description: User's role in the system
        faculty:
          type: string
          description: User's faculty (required for student/hod/coordinator)
        program:
          type: string
          description: User's program (required for student/hod/coordinator)
        password:
          type: string
          format: password
          minLength: 8
          description: Account password (min 8 characters)
        status:
          type: string
          enum: [Active, Inactive]
          default: Active
          description: Initial account status
        phone:
          type: string
          description: User's phone number (optional)

    AuthResponse:
      type: object
      properties:
        id:
          type: string
          description: User's unique identifier
        name:
          type: string
          description: User's full name
        email:
          type: string
          description: User's email address
        matricule:
          type: string
          description: User's matriculation number
        role:
          type: string
          description: User's role
        faculty:
          type: string
          description: User's faculty
        program:
          type: string
          description: User's program
        status:
          type: string
          description: Account status
        createdDate:
          type: string
          format: date-time
          description: Account creation date
        token:
          type: string
          description: JWT authentication token

    Error:
      type: object
      properties:
        error:
          type: string
          description: Error type
        message:
          type: string
          description: Error message
        code:
          type: integer
          description: HTTP status code
        details:
          type: object
          description: Additional error details

    Complaint:
      type: object
      properties:
        id:
          type: string
          description: Complaint unique identifier
        studentName:
          type: string
          description: Name of the student
        matricule:
          type: string
          description: Student's matriculation number
        program:
          type: string
          description: Academic program
        level:
          type: string
          enum: [L200, L300, L400, L500]
          description: Student's level
        complaintType:
          type: string
          enum: [CA Mark, Exam Mark, Course Registration, Other]
          description: Type of complaint
        courseCode:
          type: string
          description: Code of the course involved
        subject:
          type: string
          description: Brief subject of the complaint
        description:
          type: string
          description: Detailed description of the complaint
        status:
          type: string
          enum: [New, Processing, Resolved, Escalated]
          description: Current status of the complaint
        semester:
          type: string
          enum: [First Semester, Second Semester]
          description: Academic semester
        createdBy:
          type: string
          description: ID of user who created the complaint
        assignedTo:
          type: string
          description: ID of user complaint is assigned to
        statusHistory:
          type: array
          items:
            type: object
            properties:
              status:
                type: string
                description: Status at this point
              updatedBy:
                type: string
                description: User who updated the status
              comment:
                type: string
                description: Comment about the status change
              timestamp:
                type: string
                format: date-time
                description: When the status was updated
        comments:
          type: array
          items:
            type: object
            properties:
              text:
                type: string
                description: Comment text
              author:
                type: string
                description: User who made the comment
              timestamp:
                type: string
                format: date-time
                description: When comment was made
        attachedFiles:
          type: array
          items:
            type: object
            properties:
              filename:
                type: string
              path:
                type: string
              mimetype:
                type: string
              size:
                type: number
              uploadedBy:
                type: string
              uploadedAt:
                type: string
                format: date-time

    ComplaintAnalytics:
      type: object
      properties:
        totalComplaints:
          type: number
          description: Total number of complaints
        statusCounts:
          type: object
          description: Count of complaints by status
        topComplaintTypes:
          type: array
          description: Most common complaint types
          items:
            type: object
            properties:
              _id:
                type: string
                description: Complaint type
              count:
                type: number
                description: Number of complaints
        topCourses:
          type: array
          description: Courses with most complaints
          items:
            type: object
            properties:
              _id:
                type: string
                description: Course code
              count:
                type: number
                description: Number of complaints

paths:
  /api/auth/register:
    post:
      summary: Register new student account
      description: Creates a new student account in the system
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
      responses:
        '201':
          description: Student account created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Email or matricule already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/login:
    post:
      summary: Login to account
      description: Authenticate user using email/matricule and password
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthResponse'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Account inactive
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/auth/admin/users:
    post:
      summary: Create new user (Admin only)
      description: Allows administrators to create new users of any role
      tags:
        - Authentication
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminCreateUserRequest'
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '401':
          description: Unauthorized - No token provided
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: Forbidden - Not an admin
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '409':
          description: Email or matricule already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500':
          description: Server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /api/complaints:
    post:
      summary: Create new complaint
      description: Submit a new complaint (Student only)
      tags:
        - Complaints
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                level:
                  type: string
                  enum: [L200, L300, L400, L500]
                complaintType:
                  type: string
                  enum: [CA Mark, Exam Mark, Course Registration, Other]
                courseCode:
                  type: string
                subject:
                  type: string
                  minLength: 5
                  maxLength: 100
                description:
                  type: string
                  minLength: 20
                  maxLength: 1000
                semester:
                  type: string
                  enum: [First Semester, Second Semester]
                files:
                  type: array
                  items:
                    type: string
                    format: binary
      responses:
        '201':
          description: Complaint created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Complaint'
        '400':
          $ref: '#/components/responses/ValidationError'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
    
    get:
      summary: List complaints
      description: Get complaints based on user role
      tags:
        - Complaints
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of complaints
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Complaint'
        '401':
          $ref: '#/components/responses/Unauthorized'

  /api/complaints/analytics:
    get:
      summary: Get complaint analytics
      description: Get analytics data (HOD/Coordinator/Admin only)
      tags:
        - Complaints
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Analytics data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ComplaintAnalytics'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'

  /api/complaints/{id}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Get complaint details
      description: Get details of a specific complaint
      tags:
        - Complaints
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Complaint details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Complaint'
        '404':
          description: Complaint not found

  /api/complaints/{id}/status:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    patch:
      summary: Update complaint status
      description: Update status of a complaint (HOD/Coordinator/Admin only)
      tags:
        - Complaints
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - status
              properties:
                status:
                  type: string
                  enum: [Processing, Resolved, Escalated]
                comment:
                  type: string
      responses:
        '200':
          description: Status updated successfully
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Complaint not found

  /api/complaints/{id}/comments:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    post:
      summary: Add comment
      description: Add a comment to a complaint
      tags:
        - Complaints
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - comment
              properties:
                comment:
                  type: string
      responses:
        '200':
          description: Comment added successfully
        '404':
          description: Complaint not found

  /api/complaints/bulk-resolve:
    post:
      summary: Bulk resolve complaints
      description: Resolve multiple complaints at once (HOD/Coordinator/Admin only)
      tags:
        - Complaints
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - complaintIds
                - resolution
              properties:
                complaintIds:
                  type: array
                  items:
                    type: string
                resolution:
                  type: string
                comment:
                  type: string
      responses:
        '200':
          description: Complaints resolved successfully
        '403':
          $ref: '#/components/responses/Forbidden'

  /api/complaints/{id}/escalate:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    post:
      summary: Escalate complaint
      description: Escalate a complaint to higher authority
      tags:
        - Complaints
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - escalateTo
              properties:
                escalateTo:
                  type: string
                  description: User ID to escalate to
                instructions:
                  type: string
      responses:
        '200':
          description: Complaint escalated successfully
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: Complaint not found

  /api/complaints/{id}/notifications:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
    get:
      summary: Get complaint notifications
      description: Get list of notifications for a specific complaint
      tags:
        - Complaints
      security:
        - BearerAuth: []
      responses:
        '200':
          description: List of notifications
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    message:
                      type: string
                    read:
                      type: boolean
                    createdAt:
                      type: string
                      format: date-time
        '404':
          description: Complaint not found

  /api/complaints/{id}/notifications/{notificationId}:
    parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: notificationId
        in: path
        required: true
        schema:
          type: string
    patch:
      summary: Mark notification as read
      description: Mark a specific notification as read
      tags:
        - Complaints
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Notification marked as read
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    message:
                      type: string
                    read:
                      type: boolean
                    createdAt:
                      type: string
                      format: date-time
        '404':
          description: Complaint or notification not found

  /api/complaints/admin-actions:
    post:
      summary: Perform system admin actions
      description: Special actions that only system administrators can perform
      tags:
        - Complaints
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: The schema depends on the specific admin action being performed
      responses:
        '200':
          description: Admin action completed successfully
        '403':
          $ref: '#/components/responses/Forbidden'

components:
  responses:
    ValidationError:
      description: Invalid input data
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    Unauthorized:
      description: Authentication required
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    
    Forbidden:
      description: Not allowed to perform this action
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'